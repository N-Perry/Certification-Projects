const placeholder = `
  # this is a header!
  
  ## this is a sub-header!
  
  [this](google.com) is a link
  
  \` here is some code \` between 2 backticks
  
  \`\`\`
    multi-line code baby
    you heard me
    you're saying this isn't code? you're code. yeah i said it.
  \`\`\`
  
  > Block Quote Block Quote Bonk Quote
  
  **B O L D**
  
  - This
    - is
      - a
        - list
        
  ![Sexy Platypus](https://cdn.mos.cms.futurecdn.net/LTgdH3aE3sitD5Hwvf7Nym-1024-80.jpg.webp)
  

`;

const Toolbar = props => {
  return (
    <div className="toolbar">
      <i className="fa fa-free-code-camp"></i>
      {props.text}
      <i className={props.icon} onClick={props.onClick}></i>
    </div>
  );
};

const Editor = props => {
  return (
    <textarea
      id="editor"
      onChange={props.onChange}
      type="text"
      value={props.markdown}
      >
      
    </textarea>
  );
};


const renderer = new marked.Renderer();
renderer.link = function (href, title, text) {
  return `<a target="_blank" href=""${href}">${text}</a>`;
};

const Preview = props => {
  return (
    React.createElement("div", {
      dangerouslySetInnerHTML: {
        __html: marked(props.markdown, {renderer: renderer}) },
      
      id: "preview"
    })
  );
};

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      markdown: placeholder,
      editorMaximized: false,
      previewMaximized: false
    }
    
    this.handleChange = this.handleChange.bind(this);
    this.handleEditorMaximize = this.handleEditorMaximize.bind(this);
    this.handlePreviewMaximize = this.handlePreviewMaximize.bind(this);
  }
  
  handleChange(e) {
    this.setState({
      markdown: e.target.value
    });
  }
  
  handleEditorMaximize() {
    this.setState({
      editorMaximized: !this.state.editorMaximized
    });
  }
  
  handlePreviewMaximize() {
    this.setState({
      previewMaximized: !this.state.previewMaximized
    });
  }
  
  render() {
    const classes = this.state.editorMaximized ?
          ['editorWrap maximized', 'previewWrap hide', 'fa fa-compress'] :
          this.state.previewMaximized ?
          ['editorWrap hide', 'previewWrap maximized', 'fa fa-compress'] :
          ['editorWrap', 'previewWrap', 'fa fa-arrows-alt'];
    
    return (
      <div>
        <div className={classes[0]}>
          <Toolbar 
            icon={classes[2]}
            onClick={this.handleEditorMaximize}
            text="Editor"
          />
          <Editor 
            markdown={this.state.markdown}
            onChange={this.handleChange}
          />
        </div>
          <div className='converter'></div>
          <div className={classes[1]}>
            <Toolbar 
              icon={classes[2]}
              onClick={this.handlePreviewMaximize}
              text="Previewer"
            />
            <Preview markdown={this.state.markdown}/>
          </div>
      </div>
    );
  }
}

ReactDOM.render(<App />, document.getElementById("app"));




